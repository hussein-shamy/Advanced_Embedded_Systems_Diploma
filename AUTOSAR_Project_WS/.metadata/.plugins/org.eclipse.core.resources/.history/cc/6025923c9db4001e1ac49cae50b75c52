/******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.c
 *
 * Description: Source file for TM4C123GH6PM Microcontroller - Port Driver.
 *
 * Author : Hussein El-Shamy
 ******************************************************************************/

#include "Port.h"
#include "Port_Regs.h"
#include "Det.h"

/* AUTOSAR Version checking between Det and Dio Modules */
#if ((DET_AR_MAJOR_VERSION != PORT_AR_RELEASE_MAJOR_VERSION)\
        || (DET_AR_MINOR_VERSION != PORT_AR_RELEASE_MINOR_VERSION)\
        || (DET_AR_PATCH_VERSION != PORT_AR_RELEASE_PATCH_VERSION))
#error "The AR version of Det.h does not match the expected version"
#endif


STATIC Port_Status PORT_Status = PORT_NOT_INITIALIZED;

STATIC const Port_ConfigChannel * Port_PortChannels = NULL_PTR;


/************************************************************************************
 * Service Name:     Port_Init
 * Sync/Async:       Synchronous
 * Reentrancy:       Non Reentrant
 * Parameters (in):  - ConfigPtr -> Pointer to the configuration set.
 * Parameters (inout): None
 * Parameters (out):   None
 * Return value:       None
 * Description:        Initializes the Port Driver module.
 ************************************************************************************/

void Port_Init(const Port_ConfigType *ConfigPtr)
{
/************************************************************************************
 * [0][A]Declaring the local variables that used in this function
 ***********************************************************************************/

    uint8 pinIndex = PORTA_PA0 ; /* used as index in the loop, starting with the first Pin*/

    volatile uint32 * PortGpio_Ptr = NULL_PTR; /* point to the required Port Registers base address */




/************************************************************************************
 * [1][A]Checking the development error: PORT_E_PARAM_CONFIG
 *    [B]And if the error is not exist, change the status of module to initialized status
 *    [C]Also use global pointer 'Port_PortChannels' to store the address of the first channel configuration structure
 ***********************************************************************************/

#if (PORT_DEV_ERROR_DETECT == STD_ON)
    /* check if the input configuration pointer is not a NULL_PTR */
    if (NULL_PTR == ConfigPtr)
    {
        Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
                        PORT_E_PARAM_CONFIG);
    }
    else
#endif
    {
        /*
         * Set the module state to initialized and point to the PB configuration structure using a global pointer.
         * This global pointer is global to be used by other functions to read the PB configuration structures
         */
        PORT_Status = PORT_INITIALIZED;
        Port_PortChannels = ConfigPtr->Channel; /* address of the first Channels structure --> Channels[0] */
    }

/************************************************************************************
 * [2][A] LOOPING TO ALL CHANNELS to assign the Post-build configurations
 ***********************************************************************************/

for(pinIndex = PORTA_PA0 ; pinIndex <= PORT_NUMBER_OF_PORT_PINS ; pinIndex++ ){

/*************************** START OF LOOPING TO ALL CHANNELS **********************/

/************************************************************************************
 * [3][A] Assigning the base address of the GPIO port to use in manipulating the registers, lately
 ***********************************************************************************/

    switch(ConfigPtr->Channel[pinIndex].port_num)
    {
        case  0: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTA_BASE_ADDRESS; /* PORTA Base Address */
                 break;
        case  1: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTB_BASE_ADDRESS; /* PORTB Base Address */
                 break;
        case  2: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTC_BASE_ADDRESS; /* PORTC Base Address */
                 break;
        case  3: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTD_BASE_ADDRESS; /* PORTD Base Address */
                 break;
        case  4: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTE_BASE_ADDRESS; /* PORTE Base Address */
                 break;
        case  5: PortGpio_Ptr = (volatile uint32 *)GPIO_PORTF_BASE_ADDRESS; /* PORTF Base Address */
                 break;
    }

/************************************************************************************
 * [4][A]
 ***********************************************************************************/






/*************************** END OF LOOPING TO ALL CHANNELS ************************/

}

/*************************** END OF THE INTIALZATION FUNCTION **********************/

}

#if (PORT_SET_PIN_DIRECTION_API == STD_ON)
/************************************************************************************
 * Service Name:     Port_SetPinDirection
 * Sync/Async:       Synchronous
 * Reentrancy:       Reentrant
 * Parameters (in):  - Pin       -> Port Pin ID number.
 *                   - Direction -> Port Pin Direction.
 * Parameters (inout): None
 * Parameters (out):   None
 * Return value:       None
 * Description:        Sets the port pin direction.
 ************************************************************************************/
void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction)
{













}
#endif

/************************************************************************************
 * Service Name:     Port_RefreshPortDirection
 * Sync/Async:       Synchronous
 * Reentrancy:       Non Reentrant
 * Parameters (in):  None
 * Parameters (inout): None
 * Parameters (out):   None
 * Return value:       None
 * Description:        Refreshes port direction.
 ************************************************************************************/
void Port_RefreshPortDirection(void)
{












}

#if (PORT_VERSION_INFO_API==STD_ON)
/************************************************************************************
 * Service Name:     Port_GetVersionInfo
 * Sync/Async:       Synchronous
 * Reentrancy:       Non Reentrant
 * Parameters (in):  None
 * Parameters (inout): None
 * Parameters (out):   versioninfo -> Pointer to where to store the version information
 * Return value:       None
 * Description:        Returns the version information of this module.
 ************************************************************************************/
void Port_GetVersionInfo(Std_VersionInfoType *versioninfo)
{













}

#endif

#if (PORT_SET_PIN_MODE_API==STD_ON)
/************************************************************************************
 * Service Name:     Port_SetPinMode
 * Sync/Async:       Synchronous
 * Reentrancy:       Reentrant
 * Parameters (in):  - Pin  -> Port Pin ID number.
 *                   - Mode -> New Port Pin mode to be set on port pin.
 * Parameters (inout): None
 * Parameters (out):   None
 * Return value:       None
 * Description:        This function sets the port pin mode:
 *                     - It modifies the mode of the specified port pin during runtime.
 ************************************************************************************/
void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode)
{











}
#endif
